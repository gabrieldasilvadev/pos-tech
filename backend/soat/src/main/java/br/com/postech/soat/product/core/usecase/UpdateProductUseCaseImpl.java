package br.com.postech.soat.product.core.usecase;import br.com.postech.soat.product.core.domain.Product;import br.com.postech.soat.product.core.dto.UpdateProductInput;import br.com.postech.soat.product.core.dto.UpdateProductOutput;import br.com.postech.soat.product.core.exception.ProductNotFoundException;import br.com.postech.soat.product.core.ports.in.UpdateProductUseCase;import br.com.postech.soat.product.core.ports.out.ProductRepository;import java.util.Optional;import java.util.UUID;public class UpdateProductUseCaseImpl implements UpdateProductUseCase {    private final ProductRepository repository;    public UpdateProductUseCaseImpl(ProductRepository repository) {        this.repository = repository;    }    @Override    public UpdateProductOutput update (UUID uuid, UpdateProductInput request) {        Product existingProduct = repository.findById(uuid)            .orElseThrow(() -> new ProductNotFoundException("Produto n√£o encontrado"));        Optional.ofNullable(request.getName()).ifPresent(existingProduct::setName);        Optional.ofNullable(request.getPrice()).ifPresent(existingProduct::setPrice);        Optional.ofNullable(request.getDescription()).ifPresent(existingProduct::setDescription);        Optional.ofNullable(request.getImage()).ifPresent(existingProduct::setImage);        Optional.ofNullable(request.getCategory()).ifPresent(existingProduct::setCategory);        final Product updated = repository.save(existingProduct);        return new UpdateProductOutput (            updated.getId(),            updated.getSku(),            updated.getName(),            updated.getPrice(),            updated.getDescription(),            updated.getImage(),            updated.getCategory(),            updated.getActive()        );    }}