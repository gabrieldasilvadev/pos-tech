openapi: 3.0.3
info:
  title: PosTech - SOAT
  version: '1.0'
  description: API para gerenciamento de clientes e pedidos no contexto da disciplina de Soluções de Arquitetura de Software.
  contact:
    email: hahmann96@gmail.com
    name: Philipp Hahmann
    url: 'https://github.com/philipphahmann'
  license:
    name: MIT License
    url: 'https://opensource.org/licenses/MIT'
servers:
  - url: 'http://localhost:8080'
    description: Localhost
tags:
  - name: Customer
    description: Operações relacionadas a clientes
  - name: Product
    description: Operações relacionadas a produtos
  - name: Order
    description: Operações relacionadas aos pedidos
paths:
  /customers:
    get:
      summary: Buscar clientes (todos ou por CPF)
      responses:
        '200':
          description: Cliente(s) encontrado(s)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
              examples:
                ExemploClientePorCPF:
                  value:
                    - id: 01fc4570-8b23-11ed-a1eb-0242ac120002
                      cpf: '12345678900'
                      name: Maria Oliveira
                      email: maria@example.com
                ExemploListaClientes:
                  value:
                    - id: 01fc4570-8b23-11ed-a1eb-0242ac120002
                      cpf: '12345678900'
                      name: Maria Oliveira
                      email: maria@example.com
                    - id: 01fc4570-8b23-11ed-a1eb-0242ac120003
                      cpf: '12345678901'
                      name: Joe Doe
                      email: joe@doe.com
        '204':
          description: Nenhum cliente retornado
        '400':
          description: Requisição inválida. Verique os dados enviados.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erro interno no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: getClients
      parameters:
        - $ref: '#/components/parameters/CpfParam'
      description: Busca todos os clientes cadastrados ou realiza filtro por CPF
      tags:
        - Customer
    post:
      summary: Criar cliente
      responses:
        '201':
          description: Cliente cadastrado com sucesso
        '400':
          description: Requisição inválida. Verifique os dados enviados.
        '409':
          description: Duplicidade
        '500':
          description: Erro interno no servidor
      operationId: postClients
      requestBody:
        $ref: '#/components/requestBodies/ClientRequest'
      description: Cria um cliente
      tags:
        - Customer
    parameters: []
  /products:
    get:
      summary: 'Buscar produtos (todos, por ID ou por categoria)'
      description: Retorna todos os produtos cadastrados ou realiza filtros por ID ou categoria
      operationId: getProduct
      parameters:
        - $ref: '#/components/parameters/ProductIdParam'
        - $ref: '#/components/parameters/CategoryParam'
      responses:
        '200':
          description: OK
        '204':
          description: Nenhum produto encontrado
        '400':
          description: Requisição inválida
        '500':
          description: Erro interno ao buscar produtos
      tags:
        - Product
    post:
      summary: Criar produto
      description: 'Cria um novo produto no catálogo, exigindo dados como nome, SKU, preço e categoria.'
      responses:
        '201':
          $ref: '#/components/responses/CreateProduct201Response'
        '400':
          description: 'Dados inválidos. Por favor, valide as informações.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
      operationId: postProducts
      requestBody:
        $ref: '#/components/requestBodies/ProductCreateRequest'
      tags:
        - Product
    parameters: []
  '/products/{productId}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: productId
        in: path
        required: true
    delete:
      summary: Inativar produto
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: deleteProducts
      tags:
        - Product
    put:
      summary: Atualizar produto
      tags:
        - Product
      responses:
        '200':
          $ref: '#/components/responses/UpdateProduct200Response'
        '400':
          description: Dados inválidos. Verifique os campos obrigatórios e o formato enviado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Recurso não encontrado. Verifique o identificador ou o endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erro interno no servidor. Tente novamente mais tarde ou contate o suporte.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: putProducts
      x-stoplight:
        id: 9f1p50j19j0pv
      description: Atualiza um produto existente com base no identificador e nos novos dados enviados.
      requestBody:
        $ref: '#/components/requestBodies/ProductUpdateRequest'
  /orders:
    get:
      summary: Buscar pedido
      operationId: get-orders
      responses:
        '200':
          description: Lista de pedidos
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
      tags:
        - Order
    post:
      summary: Criar pedido
      operationId: post-orders
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Pedido criado com sucesso
      tags:
        - Order
components:
  schemas:
    Customer:
      type: object
      title: Client
      description: Modelo de cliente no banco de dados
      required:
        - id
        - cpf
        - name
        - email
      properties:
        id:
          type: string
          format: uuid
        cpf:
          type: string
          pattern: '^\d{11}$'
          maxLength: 11
          minLength: 11
          example: '12345678901'
        name:
          type: string
        email:
          type: string
          format: email
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        cpf: '12345678901'
        name: John Doe
        email: john@doe.com
    Product:
      type: object
      required:
        - id
        - sku
        - active
        - name
        - price
        - description
        - image
        - category
      properties:
        id:
          type: string
          format: uuid
        sku:
          type: string
        active:
          type: boolean
        name:
          type: string
        price:
          type: number
        description:
          type: string
        image:
          type: string
        category:
          type: string
          enum:
            - SNACK
            - DRINK
            - DESSERT
            - SIDE_DISH
    Category:
      title: Category
      enum:
        - SNACK
        - DRINK
        - DESSERT
        - SIDE_DISH
    ErrorResponse:
      title: ErrorResponse
      type: object
      description: Response de erro
      properties:
        status:
          type: integer
        message:
          type: string
        error:
          type: array
          items:
            type: string
      example:
        status: 400
        message: Requisição inválida
        error:
          - Campo obrigatório 'email' não informado
  parameters:
    CpfParam:
      name: cpf
      in: query
      schema:
        type: string
        pattern: '^\d{11}$'
      description: CPF do cliente no formato apenas números
    CategoryParam:
      name: category
      in: query
      required: false
      schema:
        type: string
      description: Enum da categoria
    ProductIdParam:
      name: ProductIdParam
      in: query
      required: false
      schema:
        type: string
      description: Id do produto
  requestBodies:
    ClientRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - cpf
              - name
              - email
            properties:
              cpf:
                type: string
                minLength: 11
                maxLength: 11
                example: '12345678901'
              name:
                type: string
              email:
                type: string
                format: email
    ProductCreateRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - sku
              - name
              - price
              - description
              - image
              - category
            properties:
              sku:
                type: string
              name:
                type: string
              price:
                type: number
              description:
                type: string
              image:
                type: string
              category:
                $ref: '#/components/schemas/Category'
    ProductUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              price:
                type: number
              description:
                type: string
              image:
                type: string
              category:
                $ref: '#/components/schemas/Category'
  responses:
    CreateProduct201Response:
      description: Produto criado com sucesso!
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                x-stoplight:
                  id: wts9304thx8uu
              message:
                type: string
                x-stoplight:
                  id: lukg5rt7jkq8s
    UpdateProduct200Response:
      description: Produto atualizado com sucesso!
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
